{
  "version": 3,
  "sources": ["../../../app/routes/reset-password.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/reset-password.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/reset-password.tsx\");\n  import.meta.hot.lastModified = \"1754585347714.824\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\nimport { Form, useActionData, useNavigation, useSearchParams } from '@remix-run/react';\nimport { json, redirect } from '@remix-run/node';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '~/components/ui/card';\nimport { Logo } from '~/components/ui/logo';\nimport { supabase } from '~/lib/supabase.server';\nimport { createUserSession } from '~/lib/auth.server';\nimport { Eye, EyeOff } from 'lucide-react';\nexport async function loader({\n  request\n}) {\n  const url = new URL(request.url);\n  const code = url.searchParams.get('code');\n  if (!code) {\n    return redirect('/login?error=Invalid reset link');\n  }\n  return json({\n    code\n  });\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const password = formData.get('password');\n  const confirmPassword = formData.get('confirmPassword');\n  const code = formData.get('code');\n  if (!password || !confirmPassword || !code) {\n    return json({\n      error: 'All fields are required'\n    }, {\n      status: 400\n    });\n  }\n  if (password !== confirmPassword) {\n    return json({\n      error: 'Passwords do not match'\n    }, {\n      status: 400\n    });\n  }\n  if (password.length < 6) {\n    return json({\n      error: 'Password must be at least 6 characters'\n    }, {\n      status: 400\n    });\n  }\n\n  // Exchange the code for a session first\n  const {\n    data: sessionData,\n    error: sessionError\n  } = await supabase.auth.exchangeCodeForSession(code);\n  if (sessionError || !sessionData.session) {\n    return json({\n      error: 'Invalid or expired reset link'\n    }, {\n      status: 400\n    });\n  }\n\n  // Update the password\n  const {\n    data,\n    error\n  } = await supabase.auth.updateUser({\n    password: password\n  });\n  if (error) {\n    return json({\n      error: error.message\n    }, {\n      status: 400\n    });\n  }\n\n  // Sign in the user with the new session\n  return createUserSession(sessionData.session.access_token, sessionData.session.refresh_token, '/dashboard?message=Password updated successfully');\n}\nexport default function ResetPassword() {\n  _s();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const [searchParams] = useSearchParams();\n  const isSubmitting = navigation.state === 'submitting';\n  const code = searchParams.get('code');\n  return <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-6\">\n            <Logo variant=\"dark\" size=\"lg\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Set New Password</CardTitle>\n          <CardDescription>\n            Enter your new password below.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form method=\"post\" className=\"space-y-4\">\n            <input type=\"hidden\" name=\"code\" value={code || ''} />\n            \n            <div className=\"relative\">\n              <Input type={showPassword ? 'text' : 'password'} name=\"password\" placeholder=\"New password\" required className=\"w-full pr-10\" minLength={6} />\n              <button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\">\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </button>\n            </div>\n\n            <div className=\"relative\">\n              <Input type={showConfirmPassword ? 'text' : 'password'} name=\"confirmPassword\" placeholder=\"Confirm new password\" required className=\"w-full pr-10\" minLength={6} />\n              <button type=\"button\" onClick={() => setShowConfirmPassword(!showConfirmPassword)} className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\">\n                {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </button>\n            </div>\n\n            {actionData?.error && <div className=\"text-red-600 text-sm text-center bg-red-50 p-3 rounded-md\">\n                {actionData.error}\n              </div>}\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n              {isSubmitting ? 'Updating...' : 'Update Password'}\n            </Button>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>;\n}\n_s(ResetPassword, \"hOZAMYmjgF2uqYBDAzKSvigAnG0=\", false, function () {\n  return [useActionData, useNavigation, useSearchParams];\n});\n_c = ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
