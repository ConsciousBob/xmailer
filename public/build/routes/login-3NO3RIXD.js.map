{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login.tsx\");\n  import.meta.hot.lastModified = \"1754585347714.315\";\n}\n// REMIX HMR END\n\nimport { useState, useEffect } from 'react';\nimport { Form, useActionData, useNavigation, useLoaderData } from '@remix-run/react';\nimport { json, redirect } from '@remix-run/node';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '~/components/ui/card';\nimport { Logo } from '~/components/ui/logo';\nimport { supabase } from '~/lib/supabase.server';\nimport { createUserSession, getUser } from '~/lib/auth.server';\nimport { Eye, EyeOff } from 'lucide-react';\nexport async function loader({\n  request\n}) {\n  const user = await getUser(request);\n  if (user) {\n    return redirect('/dashboard');\n  }\n  return json({\n    env: {\n      SUPABASE_URL: process.env.SUPABASE_URL,\n      SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY\n    }\n  });\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const action = formData.get('_action');\n  if (!email || !password) {\n    return json({\n      error: 'Email and password are required'\n    }, {\n      status: 400\n    });\n  }\n  if (action === 'login') {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    if (!data.session) {\n      return json({\n        error: 'Failed to create session'\n      }, {\n        status: 400\n      });\n    }\n\n    // Create or update user profile\n    const {\n      error: profileError\n    } = await supabase.from('profiles').upsert({\n      id: data.user.id,\n      email: data.user.email,\n      full_name: data.user.user_metadata?.full_name || null,\n      updated_at: new Date().toISOString()\n    });\n    if (profileError) {\n      console.error('Profile creation error:', profileError);\n    }\n    return createUserSession(data.session.access_token, data.session.refresh_token, '/dashboard');\n  }\n  if (action === 'signup') {\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        emailRedirectTo: `${new URL(request.url).origin}/auth/callback`\n      }\n    });\n    if (error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    if (data.user && !data.session) {\n      return json({\n        message: 'Check your email for a verification link before signing in.',\n        showResend: true,\n        email\n      });\n    }\n    if (data.session) {\n      // Auto sign-in after signup (if email confirmation is disabled)\n      const {\n        error: profileError\n      } = await supabase.from('profiles').insert({\n        id: data.user.id,\n        email: data.user.email,\n        full_name: data.user.user_metadata?.full_name || null\n      });\n      if (profileError) {\n        console.error('Profile creation error:', profileError);\n      }\n      return createUserSession(data.session.access_token, data.session.refresh_token, '/dashboard');\n    }\n  }\n  if (action === 'resend') {\n    const {\n      error\n    } = await supabase.auth.resend({\n      type: 'signup',\n      email,\n      options: {\n        emailRedirectTo: `${new URL(request.url).origin}/auth/callback`\n      }\n    });\n    if (error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      message: 'Verification email sent! Check your inbox.'\n    });\n  }\n  return json({\n    error: 'Invalid action'\n  }, {\n    status: 400\n  });\n}\nexport default function Login() {\n  _s();\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const actionData = useActionData();\n  const {\n    env\n  } = useLoaderData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n\n  // Make env variables available to client-side code\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      window.ENV = env;\n    }\n  }, [env]);\n  return <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-6\">\n            <Logo variant=\"dark\" size=\"lg\" />\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {isSignUp ? 'Create Account' : 'Welcome Back'}\n          </CardTitle>\n          <CardDescription>\n            {isSignUp ? 'Sign up to start sending bulk emails' : 'Sign in to your email autoresponder account'}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form method=\"post\" className=\"space-y-4\">\n            <div>\n              <Input type=\"email\" name=\"email\" placeholder=\"Email address\" required className=\"w-full\" defaultValue={actionData?.email || ''} />\n            </div>\n            \n            <div className=\"relative\">\n              <Input type={showPassword ? 'text' : 'password'} name=\"password\" placeholder=\"Password\" required className=\"w-full pr-10\" minLength={6} />\n              <button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\">\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </button>\n            </div>\n\n            {actionData?.error && <div className=\"text-red-600 text-sm text-center bg-red-50 p-3 rounded-md\">\n                {actionData.error}\n              </div>}\n\n            {actionData?.message && <div className=\"text-green-600 text-sm text-center bg-green-50 p-3 rounded-md\">\n                {actionData.message}\n                {actionData.showResend && <div className=\"mt-2\">\n                    <Button type=\"submit\" name=\"_action\" value=\"resend\" variant=\"outline\" size=\"sm\" disabled={isSubmitting}>\n                      Resend verification email\n                    </Button>\n                  </div>}\n              </div>}\n\n            <Button type=\"submit\" name=\"_action\" value={isSignUp ? 'signup' : 'login'} className=\"w-full\" disabled={isSubmitting}>\n              {isSubmitting ? 'Processing...' : isSignUp ? 'Create Account' : 'Sign In'}\n            </Button>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <button type=\"button\" onClick={() => setIsSignUp(!isSignUp)} className=\"text-blue-600 hover:text-blue-500 text-sm\">\n              {isSignUp ? 'Already have an account? Sign in' : \"Don't have an account? Sign up\"}\n            </button>\n          </div>\n\n          {!isSignUp && <div className=\"mt-4 text-center\">\n              <a href=\"/forgot-password\" className=\"text-sm text-gray-600 hover:text-gray-800\">\n                Forgot your password?\n              </a>\n            </div>}\n        </CardContent>\n      </Card>\n    </div>;\n}\n_s(Login, \"2EriMoCM/L+fsIXPUXZyKlal6P8=\", false, function () {\n  return [useActionData, useLoaderData, useNavigation];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAoC;AAEpC,kBAA+B;AAK/B,sBAAyB;AACzB,kBAA2C;AA2J/B;AAvLZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AAiJe,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,KAAK;AAC9C,QAAM,CAAC,cAAc,eAAe,QAAI,uBAAS,KAAK;AACtD,QAAM,aAAa,cAAc;AACjC,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,aAAa,cAAc;AACjC,QAAM,eAAe,WAAW,UAAU;AAG1C,8BAAU,MAAM;AACd,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,MAAM;AAAA,IACf;AAAA,EACF,GAAG,CAAC,GAAG,CAAC;AACR,SAAO,mDAAC,SAAI,WAAU,kGAClB,6DAAC,QAAK,WAAU,mBACd;AAAA,uDAAC,cAAW,WAAU,eACpB;AAAA,yDAAC,SAAI,WAAU,4BACb,6DAAC,QAAK,SAAQ,QAAO,MAAK,QAA1B;AAAA;AAAA;AAAA;AAAA,aAA+B,KADjC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,aAAU,WAAU,YAClB,qBAAW,mBAAmB,kBADjC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,mBACE,qBAAW,yCAAyC,iDADvD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SATF;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,IAEA,mDAAC,eACC;AAAA,yDAAC,QAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,2DAAC,SACC,6DAAC,SAAM,MAAK,SAAQ,MAAK,SAAQ,aAAY,iBAAgB,UAAQ,MAAC,WAAU,UAAS,cAAc,YAAY,SAAS,MAA5H;AAAA;AAAA;AAAA;AAAA,eAAgI,KADlI;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QAEA,mDAAC,SAAI,WAAU,YACb;AAAA,6DAAC,SAAM,MAAM,eAAe,SAAS,YAAY,MAAK,YAAW,aAAY,YAAW,UAAQ,MAAC,WAAU,gBAAe,WAAW,KAArI;AAAA;AAAA;AAAA;AAAA,iBAAwI;AAAA,UACxI,mDAAC,YAAO,MAAK,UAAS,SAAS,MAAM,gBAAgB,CAAC,YAAY,GAAG,WAAU,yFAC5E,yBAAe,mDAAC,UAAO,WAAU,aAAlB;AAAA;AAAA;AAAA;AAAA,iBAA4B,IAAK,mDAAC,OAAI,WAAU,aAAf;AAAA;AAAA;AAAA;AAAA,iBAAyB,KAD5E;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,QAEC,YAAY,SAAS,mDAAC,SAAI,WAAU,6DAChC,qBAAW,SADM;AAAA;AAAA;AAAA;AAAA,eAEpB;AAAA,QAED,YAAY,WAAW,mDAAC,SAAI,WAAU,iEAClC;AAAA,qBAAW;AAAA,UACX,WAAW,cAAc,mDAAC,SAAI,WAAU,QACrC,6DAAC,UAAO,MAAK,UAAS,MAAK,WAAU,OAAM,UAAS,SAAQ,WAAU,MAAK,MAAK,UAAU,cAAc,yCAAxG;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHsB;AAAA;AAAA;AAAA;AAAA,iBAIxB;AAAA,aANkB;AAAA;AAAA;AAAA;AAAA,eAOtB;AAAA,QAEF,mDAAC,UAAO,MAAK,UAAS,MAAK,WAAU,OAAO,WAAW,WAAW,SAAS,WAAU,UAAS,UAAU,cACrG,yBAAe,kBAAkB,WAAW,mBAAmB,aADlE;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WA3BF;AAAA;AAAA;AAAA;AAAA,aA4BA;AAAA,MAEA,mDAAC,SAAI,WAAU,oBACb,6DAAC,YAAO,MAAK,UAAS,SAAS,MAAM,YAAY,CAAC,QAAQ,GAAG,WAAU,6CACpE,qBAAW,qCAAqC,oCADnD;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEC,CAAC,YAAY,mDAAC,SAAI,WAAU,oBACzB,6DAAC,OAAE,MAAK,oBAAmB,WAAU,6CAA4C,qCAAjF;AAAA;AAAA;AAAA;AAAA,aAEA,KAHU;AAAA;AAAA;AAAA;AAAA,aAIZ;AAAA,SAzCJ;AAAA;AAAA;AAAA;AAAA,WA0CA;AAAA,OAvDF;AAAA;AAAA;AAAA;AAAA,SAwDA,KAzDG;AAAA;AAAA;AAAA;AAAA,SA0DL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,eAAe,eAAe,aAAa;AACrD,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
