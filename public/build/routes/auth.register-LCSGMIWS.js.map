{
  "version": 3,
  "sources": ["../../../app/routes/auth.register.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/auth.register.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/auth.register.tsx\");\n  import.meta.hot.lastModified = \"1754585347711.8042\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@remix-run/node';\nimport { Form, Link, useActionData, useNavigation } from '@remix-run/react';\nimport { supabase } from '~/lib/supabase.server';\nimport { getSession, commitSession } from '~/lib/session.server';\nimport { Logo } from '~/components/ui/logo';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '~/components/ui/card';\nexport async function loader({\n  request\n}) {\n  const session = await getSession(request.headers.get('Cookie'));\n  if (session.has('userId')) {\n    return redirect('/dashboard');\n  }\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const fullName = formData.get('fullName');\n  if (!email || !password || !fullName) {\n    return json({\n      error: 'All fields are required'\n    }, {\n      status: 400\n    });\n  }\n  if (password.length < 6) {\n    return json({\n      error: 'Password must be at least 6 characters'\n    }, {\n      status: 400\n    });\n  }\n  const {\n    data,\n    error\n  } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      data: {\n        full_name: fullName\n      }\n    }\n  });\n  if (error) {\n    return json({\n      error: error.message\n    }, {\n      status: 400\n    });\n  }\n  if (!data.user) {\n    return json({\n      error: 'Registration failed'\n    }, {\n      status: 400\n    });\n  }\n\n  // Create profile\n  const {\n    error: profileError\n  } = await supabase.from('profiles').insert({\n    id: data.user.id,\n    email: data.user.email,\n    full_name: fullName\n  });\n  if (profileError) {\n    console.error('Profile creation error:', profileError);\n  }\n  const session = await getSession(request.headers.get('Cookie'));\n  session.set('userId', data.user.id);\n  session.set('userEmail', data.user.email);\n  return redirect('/dashboard', {\n    headers: {\n      'Set-Cookie': await commitSession(session)\n    }\n  });\n}\nexport default function Register() {\n  _s();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n  return <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <Logo size=\"xl\" className=\"justify-center mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900\">Create your account</h1>\n          <p className=\"text-gray-600 mt-2\">Start your email marketing journey with xMailer</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Sign Up</CardTitle>\n            <CardDescription>\n              Create your xMailer account to get started\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form method=\"post\" className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"fullName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Full Name\n                </label>\n                <Input id=\"fullName\" name=\"fullName\" type=\"text\" required placeholder=\"Enter your full name\" className=\"w-full\" />\n              </div>\n\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Email\n                </label>\n                <Input id=\"email\" name=\"email\" type=\"email\" required placeholder=\"Enter your email\" className=\"w-full\" />\n              </div>\n\n              <div>\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Password\n                </label>\n                <Input id=\"password\" name=\"password\" type=\"password\" required placeholder=\"Create a password (min. 6 characters)\" className=\"w-full\" />\n              </div>\n\n              {actionData?.error && <div className=\"text-red-600 text-sm bg-red-50 p-3 rounded-md\">\n                  {actionData.error}\n                </div>}\n\n              <Button type=\"submit\" disabled={isSubmitting} className=\"w-full\">\n                {isSubmitting ? 'Creating account...' : 'Create Account'}\n              </Button>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600\">\n                Already have an account?{' '}\n                <Link to=\"/auth/login\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n                  Sign in\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>;\n}\n_s(Register, \"e3rMULficn7ldQYYArv00m53mwQ=\", false, function () {\n  return [useActionData, useNavigation];\n});\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
