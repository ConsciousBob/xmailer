{
  "version": 3,
  "sources": ["../../../app/routes/settings.smtp.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings.smtp.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings.smtp.tsx\");\n  import.meta.hot.lastModified = \"1754586020268.2432\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData, useNavigation, Link } from '@remix-run/react';\nimport { requireAuth } from '~/lib/auth.server';\nimport { supabase } from '~/lib/supabase.server';\nimport { testSMTPConnection, sendEmail } from '~/lib/email.server';\nimport { Sidebar } from '~/components/layout/sidebar';\nimport { Header } from '~/components/layout/header';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '~/components/ui/card';\nimport { ArrowLeft, Save, Server, Plus, Edit, Trash2, CheckCircle, AlertCircle, Mail } from 'lucide-react';\nexport async function loader({\n  request\n}) {\n  const user = await requireAuth(request);\n\n  // Get all SMTP configurations for the user\n  const {\n    data: smtpConfigs,\n    error\n  } = await supabase.from('smtp_configs').select('*').eq('user_id', user.id).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('SMTP configs fetch error:', error);\n    return json({\n      user,\n      smtpConfigs: [],\n      error: 'Failed to load SMTP configurations'\n    });\n  }\n  return json({\n    user,\n    smtpConfigs: smtpConfigs || []\n  });\n}\nexport async function action({\n  request\n}) {\n  const user = await requireAuth(request);\n  const formData = await request.formData();\n  const action = formData.get('_action');\n  if (action === 'create') {\n    const name = formData.get('name');\n    const host = formData.get('host');\n    const port = parseInt(formData.get('port'));\n    const username = formData.get('username');\n    const password = formData.get('password');\n    const fromEmail = formData.get('fromEmail');\n    const fromName = formData.get('fromName');\n    const useTls = formData.get('useTls') === 'on';\n    const useSsl = formData.get('useSsl') === 'on';\n    const isDefault = formData.get('isDefault') === 'on';\n\n    // Validation\n    if (!name || !host || !port || !username || !password || !fromEmail || !fromName) {\n      return json({\n        error: 'All fields are required'\n      }, {\n        status: 400\n      });\n    }\n    if (port < 1 || port > 65535) {\n      return json({\n        error: 'Port must be between 1 and 65535'\n      }, {\n        status: 400\n      });\n    }\n\n    // If this is set as default, unset other defaults\n    if (isDefault) {\n      await supabase.from('smtp_configs').update({\n        is_default: false\n      }).eq('user_id', user.id);\n    }\n\n    // Create SMTP config\n    const {\n      error\n    } = await supabase.from('smtp_configs').insert({\n      user_id: user.id,\n      name,\n      host,\n      port,\n      username,\n      password,\n      // In production, this should be encrypted\n      from_email: fromEmail,\n      from_name: fromName,\n      use_tls: useTls,\n      use_ssl: useSsl,\n      is_default: isDefault,\n      is_active: true\n    });\n    if (error) {\n      console.error('SMTP config creation error:', error);\n      return json({\n        error: 'Failed to create SMTP configuration'\n      }, {\n        status: 500\n      });\n    }\n    return json({\n      success: 'SMTP configuration created successfully'\n    });\n  }\n  if (action === 'test') {\n    const configId = formData.get('configId');\n    const testEmail = formData.get('testEmail');\n    if (!configId || !testEmail) {\n      return json({\n        error: 'Configuration ID and test email are required'\n      }, {\n        status: 400\n      });\n    }\n\n    // Get SMTP config\n    const {\n      data: config,\n      error: configError\n    } = await supabase.from('smtp_configs').select('*').eq('id', configId).eq('user_id', user.id).single();\n    if (configError || !config) {\n      return json({\n        error: 'SMTP configuration not found'\n      }, {\n        status: 404\n      });\n    }\n    try {\n      // Test SMTP connection first\n      const connectionTest = await testSMTPConnection(config);\n      if (!connectionTest) {\n        return json({\n          error: 'SMTP connection test failed. Please check your configuration.'\n        }, {\n          status: 400\n        });\n      }\n\n      // Send test email\n      const testEmailContent = {\n        to: testEmail,\n        subject: 'SMTP Configuration Test - xMailer',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <h2 style=\"color: #333; text-align: center;\">SMTP Test Email</h2>\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <p><strong>Congratulations!</strong> Your SMTP configuration is working correctly.</p>\n              <p>This test email was sent using the following configuration:</p>\n              <ul>\n                <li><strong>Configuration Name:</strong> ${config.name}</li>\n                <li><strong>SMTP Host:</strong> ${config.host}</li>\n                <li><strong>Port:</strong> ${config.port}</li>\n                <li><strong>Security:</strong> ${config.use_ssl ? 'SSL' : config.use_tls ? 'TLS' : 'None'}</li>\n                <li><strong>From:</strong> ${config.from_name} <${config.from_email}></li>\n              </ul>\n            </div>\n            <p style=\"color: #666; font-size: 14px; text-align: center;\">\n              Sent from xMailer - Email Marketing Platform<br>\n              ${new Date().toLocaleString()}\n            </p>\n          </div>\n        `\n      };\n      const emailSent = await sendEmail(testEmailContent, user.id);\n      if (emailSent) {\n        return json({\n          success: `Test email sent successfully to ${testEmail}`\n        });\n      } else {\n        return json({\n          error: 'Failed to send test email. Please check your SMTP configuration.'\n        }, {\n          status: 500\n        });\n      }\n    } catch (error) {\n      console.error('SMTP test error:', error);\n      return json({\n        error: 'SMTP test failed: ' + error.message\n      }, {\n        status: 500\n      });\n    }\n  }\n  if (action === 'delete') {\n    const configId = formData.get('configId');\n    if (!configId) {\n      return json({\n        error: 'Configuration ID required'\n      }, {\n        status: 400\n      });\n    }\n\n    // Delete SMTP config\n    const {\n      error\n    } = await supabase.from('smtp_configs').delete().eq('id', configId).eq('user_id', user.id);\n    if (error) {\n      console.error('SMTP config deletion error:', error);\n      return json({\n        error: 'Failed to delete SMTP configuration'\n      }, {\n        status: 500\n      });\n    }\n    return json({\n      success: 'SMTP configuration deleted successfully'\n    });\n  }\n  if (action === 'setDefault') {\n    const configId = formData.get('configId');\n    if (!configId) {\n      return json({\n        error: 'Configuration ID required'\n      }, {\n        status: 400\n      });\n    }\n\n    // Unset all defaults first\n    await supabase.from('smtp_configs').update({\n      is_default: false\n    }).eq('user_id', user.id);\n\n    // Set new default\n    const {\n      error\n    } = await supabase.from('smtp_configs').update({\n      is_default: true\n    }).eq('id', configId).eq('user_id', user.id);\n    if (error) {\n      console.error('SMTP config default update error:', error);\n      return json({\n        error: 'Failed to set default configuration'\n      }, {\n        status: 500\n      });\n    }\n    return json({\n      success: 'Default SMTP configuration updated'\n    });\n  }\n  return json({\n    error: 'Invalid action'\n  }, {\n    status: 400\n  });\n}\nexport default function SMTPSettings() {\n  _s();\n  const {\n    user,\n    smtpConfigs,\n    error\n  } = useLoaderData();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n  return <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header user={user} />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <div className=\"flex items-center\">\n                <Link to=\"/settings\" className=\"mr-4\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Back to Settings\n                  </Button>\n                </Link>\n                <div>\n                  <h2 className=\"text-3xl font-bold text-gray-900\">SMTP Configuration</h2>\n                  <p className=\"text-gray-600 mt-2\">\n                    Configure your email sending settings and SMTP servers.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {error && <Card className=\"mb-6 border-red-200 bg-red-50\">\n                <CardContent className=\"p-4 flex items-center\">\n                  <AlertCircle className=\"h-5 w-5 text-red-600 mr-2\" />\n                  <p className=\"text-red-800\">{error}</p>\n                </CardContent>\n              </Card>}\n\n            {actionData?.error && <Card className=\"mb-6 border-red-200 bg-red-50\">\n                <CardContent className=\"p-4 flex items-center\">\n                  <AlertCircle className=\"h-5 w-5 text-red-600 mr-2\" />\n                  <p className=\"text-red-800\">{actionData.error}</p>\n                </CardContent>\n              </Card>}\n\n            {actionData?.success && <Card className=\"mb-6 border-green-200 bg-green-50\">\n                <CardContent className=\"p-4 flex items-center\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n                  <p className=\"text-green-800\">{actionData.success}</p>\n                </CardContent>\n              </Card>}\n\n            {/* Existing SMTP Configurations */}\n            {smtpConfigs.length > 0 && <Card className=\"mb-8\">\n                <CardHeader>\n                  <CardTitle>Existing SMTP Configurations ({smtpConfigs.length})</CardTitle>\n                  <CardDescription>\n                    Manage your existing SMTP server configurations\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {smtpConfigs.map(config => <div key={config.id} className=\"border rounded-lg p-4 bg-white\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3\">\n                              <Server className=\"h-5 w-5 text-gray-400\" />\n                              <div>\n                                <h3 className=\"font-medium text-gray-900 flex items-center\">\n                                  {config.name}\n                                  {config.is_default && <span className=\"ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n                                      Default\n                                    </span>}\n                                  {!config.is_active && <span className=\"ml-2 px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full\">\n                                      Inactive\n                                    </span>}\n                                </h3>\n                                <p className=\"text-sm text-gray-600\">\n                                  {config.host}:{config.port} \u2022 {config.from_email}\n                                </p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"mt-3 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                              <div>\n                                <span className=\"text-gray-500\">Host:</span>\n                                <p className=\"font-medium\">{config.host}</p>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-500\">Port:</span>\n                                <p className=\"font-medium\">{config.port}</p>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-500\">Username:</span>\n                                <p className=\"font-medium\">{config.username}</p>\n                              </div>\n                              <div>\n                                <span className=\"text-gray-500\">Security:</span>\n                                <p className=\"font-medium\">\n                                  {config.use_ssl ? 'SSL' : config.use_tls ? 'TLS' : 'None'}\n                                </p>\n                              </div>\n                            </div>\n\n                            {/* Test Email Form */}\n                            <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                              <Form method=\"post\" className=\"flex items-center space-x-3\">\n                                <input type=\"hidden\" name=\"_action\" value=\"test\" />\n                                <input type=\"hidden\" name=\"configId\" value={config.id} />\n                                <div className=\"flex-1\">\n                                  <Input name=\"testEmail\" type=\"email\" placeholder=\"Enter your email to receive test message\" required className=\"w-full\" />\n                                </div>\n                                <Button type=\"submit\" variant=\"outline\" size=\"sm\" disabled={isSubmitting}>\n                                  <Mail className=\"h-4 w-4 mr-1\" />\n                                  {isSubmitting ? 'Sending...' : 'Send Test'}\n                                </Button>\n                              </Form>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2 ml-4\">\n                            {!config.is_default && <Form method=\"post\" className=\"inline\">\n                                <input type=\"hidden\" name=\"_action\" value=\"setDefault\" />\n                                <input type=\"hidden\" name=\"configId\" value={config.id} />\n                                <Button variant=\"outline\" size=\"sm\" type=\"submit\">\n                                  Set Default\n                                </Button>\n                              </Form>}\n                            \n                            <Button variant=\"outline\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            \n                            <Form method=\"post\" className=\"inline\">\n                              <input type=\"hidden\" name=\"_action\" value=\"delete\" />\n                              <input type=\"hidden\" name=\"configId\" value={config.id} />\n                              <Button variant=\"outline\" size=\"sm\" type=\"submit\" className=\"text-red-600 hover:text-red-700\" onClick={e => {\n                          if (!confirm('Are you sure you want to delete this SMTP configuration?')) {\n                            e.preventDefault();\n                          }\n                        }}>\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </Form>\n                          </div>\n                        </div>\n                      </div>)}\n                  </div>\n                </CardContent>\n              </Card>}\n\n            {/* Add New SMTP Configuration */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Plus className=\"h-5 w-5 mr-2\" />\n                  Add New SMTP Configuration\n                </CardTitle>\n                <CardDescription>\n                  Configure a new SMTP server for sending emails\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form method=\"post\" className=\"space-y-6\">\n                  <input type=\"hidden\" name=\"_action\" value=\"create\" />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Configuration Name *\n                      </label>\n                      <Input name=\"name\" placeholder=\"e.g., Gmail SMTP, SendGrid\" required className=\"w-full\" />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        SMTP Host *\n                      </label>\n                      <Input name=\"host\" placeholder=\"e.g., smtp.gmail.com\" required className=\"w-full\" />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Port *\n                      </label>\n                      <Input name=\"port\" type=\"number\" placeholder=\"587\" min=\"1\" max=\"65535\" required className=\"w-full\" />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Username *\n                      </label>\n                      <Input name=\"username\" placeholder=\"your-email@example.com\" required className=\"w-full\" />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Password *\n                    </label>\n                    <Input name=\"password\" type=\"password\" placeholder=\"Your SMTP password or app password\" required className=\"w-full\" />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        From Email *\n                      </label>\n                      <Input name=\"fromEmail\" type=\"email\" placeholder=\"noreply@yourdomain.com\" required className=\"w-full\" />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        From Name *\n                      </label>\n                      <Input name=\"fromName\" placeholder=\"Your Company Name\" required className=\"w-full\" />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <input type=\"checkbox\" id=\"useTls\" name=\"useTls\" className=\"rounded border-gray-300\" />\n                      <label htmlFor=\"useTls\" className=\"text-sm text-gray-700\">\n                        Use TLS (recommended for port 587)\n                      </label>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <input type=\"checkbox\" id=\"useSsl\" name=\"useSsl\" className=\"rounded border-gray-300\" />\n                      <label htmlFor=\"useSsl\" className=\"text-sm text-gray-700\">\n                        Use SSL (recommended for port 465)\n                      </label>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <input type=\"checkbox\" id=\"isDefault\" name=\"isDefault\" defaultChecked={smtpConfigs.length === 0} className=\"rounded border-gray-300\" />\n                      <label htmlFor=\"isDefault\" className=\"text-sm text-gray-700\">\n                        Set as default SMTP configuration\n                      </label>\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-4\">\n                    <Button type=\"submit\" disabled={isSubmitting} className=\"flex-1\">\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      {isSubmitting ? 'Saving Configuration...' : 'Save SMTP Configuration'}\n                    </Button>\n                  </div>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {/* Common SMTP Settings Help */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>Common SMTP Settings</CardTitle>\n                <CardDescription>\n                  Popular email service provider configurations\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Gmail</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>Host: smtp.gmail.com</li>\n                      <li>Port: 587 (TLS) or 465 (SSL)</li>\n                      <li>Use app password, not regular password</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">SendGrid</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>Host: smtp.sendgrid.net</li>\n                      <li>Port: 587 (TLS)</li>\n                      <li>Username: apikey</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Mailgun</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>Host: smtp.mailgun.org</li>\n                      <li>Port: 587 (TLS)</li>\n                      <li>Use your domain credentials</li>\n                    </ul>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Outlook/Hotmail</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>Host: smtp-mail.outlook.com</li>\n                      <li>Port: 587 (TLS)</li>\n                      <li>Use your Microsoft account</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>;\n}\n_s(SMTPSettings, \"0V1nNkBbX+i4Qo+9LzkL7aigntM=\", false, function () {\n  return [useLoaderData, useActionData, useNavigation];\n});\n_c = SMTPSettings;\nvar _c;\n$RefreshReg$(_c, \"SMTPSettings\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
