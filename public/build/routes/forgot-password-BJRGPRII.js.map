{
  "version": 3,
  "sources": ["../../../app/routes/forgot-password.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/forgot-password.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/forgot-password.tsx\");\n  import.meta.hot.lastModified = \"1754585347713.5664\";\n}\n// REMIX HMR END\n\nimport { Form, useActionData, useNavigation, Link } from '@remix-run/react';\nimport { json } from '@remix-run/node';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '~/components/ui/card';\nimport { Logo } from '~/components/ui/logo';\nimport { supabase } from '~/lib/supabase.server';\nimport { ArrowLeft } from 'lucide-react';\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  if (!email) {\n    return json({\n      error: 'Email is required'\n    }, {\n      status: 400\n    });\n  }\n  const {\n    error\n  } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: `${new URL(request.url).origin}/reset-password`\n  });\n  if (error) {\n    return json({\n      error: error.message\n    }, {\n      status: 400\n    });\n  }\n  return json({\n    message: 'Check your email for a password reset link.',\n    email\n  });\n}\nexport default function ForgotPassword() {\n  _s();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n  return <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-6\">\n            <Logo variant=\"dark\" size=\"lg\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Reset Password</CardTitle>\n          <CardDescription>\n            Enter your email address and we'll send you a link to reset your password.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form method=\"post\" className=\"space-y-4\">\n            <div>\n              <Input type=\"email\" name=\"email\" placeholder=\"Email address\" required className=\"w-full\" defaultValue={actionData?.email || ''} />\n            </div>\n\n            {actionData?.error && <div className=\"text-red-600 text-sm text-center bg-red-50 p-3 rounded-md\">\n                {actionData.error}\n              </div>}\n\n            {actionData?.message && <div className=\"text-green-600 text-sm text-center bg-green-50 p-3 rounded-md\">\n                {actionData.message}\n              </div>}\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n              {isSubmitting ? 'Sending...' : 'Send Reset Link'}\n            </Button>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <Link to=\"/login\" className=\"inline-flex items-center text-blue-600 hover:text-blue-500 text-sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-1\" />\n              Back to sign in\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>;\n}\n_s(ForgotPassword, \"e3rMULficn7ldQYYArv00m53mwQ=\", false, function () {\n  return [useActionData, useNavigation];\n});\n_c = ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,kBAAqB;AAKrB,sBAAyB;AAwCb;AAlEZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,qCAAuC,EAAE;AAAA,EAClF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAgC;AAChC,cAAY,IAAI,eAAe;AACjC;AAwCe,SAAR,iBAAkC;AACvC,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,QAAM,eAAe,WAAW,UAAU;AAC1C,SAAO,mDAAC,SAAI,WAAU,kGAClB,6DAAC,QAAK,WAAU,mBACd;AAAA,uDAAC,cAAW,WAAU,eACpB;AAAA,yDAAC,SAAI,WAAU,4BACb,6DAAC,QAAK,SAAQ,QAAO,MAAK,QAA1B;AAAA;AAAA;AAAA;AAAA,aAA+B,KADjC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,aAAU,WAAU,YAAW,8BAAhC;AAAA;AAAA;AAAA;AAAA,aAA8C;AAAA,MAC9C,mDAAC,mBAAgB,0FAAjB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAPF;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IAEA,mDAAC,eACC;AAAA,yDAAC,QAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,2DAAC,SACC,6DAAC,SAAM,MAAK,SAAQ,MAAK,SAAQ,aAAY,iBAAgB,UAAQ,MAAC,WAAU,UAAS,cAAc,YAAY,SAAS,MAA5H;AAAA;AAAA;AAAA;AAAA,eAAgI,KADlI;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QAEC,YAAY,SAAS,mDAAC,SAAI,WAAU,6DAChC,qBAAW,SADM;AAAA;AAAA;AAAA;AAAA,eAEpB;AAAA,QAED,YAAY,WAAW,mDAAC,SAAI,WAAU,iEAClC,qBAAW,WADQ;AAAA;AAAA;AAAA;AAAA,eAEtB;AAAA,QAEF,mDAAC,UAAO,MAAK,UAAS,WAAU,UAAS,UAAU,cAChD,yBAAe,eAAe,qBADjC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAfF;AAAA;AAAA;AAAA;AAAA,aAgBA;AAAA,MAEA,mDAAC,SAAI,WAAU,oBACb,6DAAC,QAAK,IAAG,UAAS,WAAU,sEAC1B;AAAA,2DAAC,aAAU,WAAU,kBAArB;AAAA;AAAA;AAAA;AAAA,eAAoC;AAAA,QAAE;AAAA,WADxC;AAAA;AAAA;AAAA;AAAA,aAGA,KAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,OApCF;AAAA;AAAA;AAAA;AAAA,SAqCA,KAtCG;AAAA;AAAA;AAAA;AAAA,SAuCL;AACJ;AACA,GAAG,gBAAgB,gCAAgC,OAAO,WAAY;AACpE,SAAO,CAAC,eAAe,aAAa;AACtC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,gBAAgB;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
