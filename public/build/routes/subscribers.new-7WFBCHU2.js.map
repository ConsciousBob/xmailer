{
  "version": 3,
  "sources": ["../../../app/routes/subscribers.new.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/subscribers.new.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/subscribers.new.tsx\");\n  import.meta.hot.lastModified = \"1754586020269.1135\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData, useNavigation, Link } from '@remix-run/react';\nimport { requireAuth } from '~/lib/auth.server';\nimport { supabase } from '~/lib/supabase.server';\nimport { Sidebar } from '~/components/layout/sidebar';\nimport { Header } from '~/components/layout/header';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '~/components/ui/card';\nimport { ArrowLeft, UserPlus } from 'lucide-react';\nexport async function loader({\n  request\n}) {\n  const user = await requireAuth(request);\n\n  // Get user's lists for subscription options\n  const {\n    data: lists,\n    error\n  } = await supabase.from('lists').select('*').eq('user_id', user.id).eq('is_active', true).order('name');\n  if (error) {\n    console.error('Lists fetch error:', error);\n    return json({\n      user,\n      lists: [],\n      error: 'Failed to load lists'\n    });\n  }\n  return json({\n    user,\n    lists\n  });\n}\nexport async function action({\n  request\n}) {\n  const user = await requireAuth(request);\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const firstName = formData.get('firstName');\n  const lastName = formData.get('lastName');\n  const selectedLists = formData.getAll('lists');\n  if (!email) {\n    return json({\n      error: 'Email is required'\n    }, {\n      status: 400\n    });\n  }\n\n  // Check if subscriber already exists\n  const {\n    data: existingSubscriber\n  } = await supabase.from('subscribers').select('id').eq('user_id', user.id).eq('email', email).single();\n  if (existingSubscriber) {\n    return json({\n      error: 'A subscriber with this email already exists'\n    }, {\n      status: 400\n    });\n  }\n\n  // Create subscriber\n  const {\n    data: subscriber,\n    error: subscriberError\n  } = await supabase.from('subscribers').insert({\n    user_id: user.id,\n    email,\n    first_name: firstName || '',\n    last_name: lastName || '',\n    status: 'subscribed',\n    subscribed_at: new Date().toISOString()\n  }).select('id').single();\n  if (subscriberError) {\n    console.error('Subscriber creation error:', subscriberError);\n    return json({\n      error: 'Failed to create subscriber'\n    }, {\n      status: 500\n    });\n  }\n\n  // Add subscriber to selected lists\n  if (selectedLists.length > 0) {\n    const listSubscriptions = selectedLists.map(listId => ({\n      subscriber_id: subscriber.id,\n      list_id: listId,\n      status: 'subscribed',\n      subscribed_at: new Date().toISOString()\n    }));\n    const {\n      error: listError\n    } = await supabase.from('list_subscribers').insert(listSubscriptions);\n    if (listError) {\n      console.error('List subscription error:', listError);\n      // Don't fail the whole operation, just log the error\n    }\n  }\n  return redirect('/subscribers');\n}\nexport default function NewSubscriber() {\n  _s();\n  const {\n    user,\n    lists,\n    error\n  } = useLoaderData();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === 'submitting';\n  return <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header user={user} />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"flex items-center mb-8\">\n              <Link to=\"/subscribers\" className=\"mr-4\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Subscribers\n                </Button>\n              </Link>\n              <div>\n                <h2 className=\"text-3xl font-bold text-gray-900\">Add New Subscriber</h2>\n                <p className=\"text-gray-600 mt-2\">\n                  Add a new subscriber to your mailing lists.\n                </p>\n              </div>\n            </div>\n\n            {error && <Card className=\"mb-6 border-red-200 bg-red-50\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-red-800\">{error}</p>\n                </CardContent>\n              </Card>}\n\n            {actionData?.error && <Card className=\"mb-6 border-red-200 bg-red-50\">\n                <CardContent className=\"p-4\">\n                  <p className=\"text-red-800\">{actionData.error}</p>\n                </CardContent>\n              </Card>}\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Subscriber Information</CardTitle>\n                <CardDescription>\n                  Enter the subscriber's details and select which lists they should join.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form method=\"post\" className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Email Address *\n                    </label>\n                    <Input name=\"email\" type=\"email\" placeholder=\"subscriber@example.com\" required className=\"w-full\" />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        First Name\n                      </label>\n                      <Input name=\"firstName\" placeholder=\"John\" className=\"w-full\" />\n                    </div>\n\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Last Name\n                      </label>\n                      <Input name=\"lastName\" placeholder=\"Doe\" className=\"w-full\" />\n                    </div>\n                  </div>\n\n                  {lists.length > 0 && <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                        Subscribe to Lists\n                      </label>\n                      <div className=\"space-y-2 max-h-48 overflow-y-auto border rounded-lg p-3\">\n                        {lists.map(list => <div key={list.id} className=\"flex items-center space-x-2\">\n                            <input type=\"checkbox\" id={`list-${list.id}`} name=\"lists\" value={list.id} className=\"rounded border-gray-300\" />\n                            <label htmlFor={`list-${list.id}`} className=\"text-sm text-gray-700 flex items-center\">\n                              <div className=\"w-3 h-3 rounded-full mr-2\" style={{\n                          backgroundColor: list.color\n                        }} />\n                              {list.name}\n                              {list.description && <span className=\"text-gray-500 ml-2\">- {list.description}</span>}\n                            </label>\n                          </div>)}\n                      </div>\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        Select which lists this subscriber should be added to.\n                      </p>\n                    </div>}\n\n                  {lists.length === 0 && <Card className=\"border-yellow-200 bg-yellow-50\">\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-yellow-800 mb-2\">\n                          You don't have any lists yet.\n                        </p>\n                        <p className=\"text-yellow-700 text-sm\">\n                          The subscriber will be added to your general subscriber list. You can create lists later and organize your subscribers.\n                        </p>\n                      </CardContent>\n                    </Card>}\n\n                  <div className=\"flex space-x-4\">\n                    <Button type=\"submit\" disabled={isSubmitting} className=\"flex-1\">\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      {isSubmitting ? 'Adding Subscriber...' : 'Add Subscriber'}\n                    </Button>\n                    \n                    <Link to=\"/subscribers\" className=\"flex-1\">\n                      <Button variant=\"outline\" className=\"w-full\">\n                        Cancel\n                      </Button>\n                    </Link>\n                  </div>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>;\n}\n_s(NewSubscriber, \"5fmIo9kIDIvhEaal8R/Ko46JN4U=\", false, function () {\n  return [useLoaderData, useActionData, useNavigation];\n});\n_c = NewSubscriber;\nvar _c;\n$RefreshReg$(_c, \"NewSubscriber\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
